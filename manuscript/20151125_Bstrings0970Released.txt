# bstrings 0.9.7.0 released

Posted: 25th November 2015

Original link: https://binaryforay.blogspot.com/2015/11/bstrings-0970-released.html

Not a lot of changes, but important ones.

Changes include:

NEW: Added some new Regex (sid, windows path, variable set, registry hive paths, base64 strings) with thanks to James Habben
NEW: Add detection of strings split across chunk boundaries
NEW: Added -d switch to recursively search a directory (per a request from David Cowen)

I am also working on porting James SQLite code which I hope to have in the next release.

And now, on to what these changes look like.

![](20151125_Bstrings0970Released\cmd.png)

Here we can see the new command line option, -d, and a note at the bottom that either -d or -f is required. This lets you target a single file or an entire directory of files (and other directories) to extract strings from.

When using -d, bstrings will search each file and show the results of each search. To combine all the search hits across all the files, use the -o switch.

![](20151125_Bstrings0970Released\dir1.png)

An interesting (and possibly problematic issue) is when strings get split across a chunk boundary. By default bstrings searches in chunks of 512 MB, but this is user definable. In previous versions of bstrings, a string across a chunk boundary would not be completely found. Rather, only the beginning and end of the string (separated at the boundary) would be reported.

{pagebreak}

In order to address this, bstrings now does some checking at each boundary to look for complete strings. In the example above, notice how we have strings like segment1, segment2, zimmerman, and so on. If we change the chunk size to, say, 1 MB, we get different results that look like this (I stripped out the middle part of all the Chunk processing to keep it simple):

![](20151125_Bstrings0970Released\chunk1.png)

{pagebreak}

As you can see, several of the words we found using the defaults are now split up, but with the new boundary checks, we are getting the additional strings as well. When a string is found at a boundary, it is prefixed with two spaces.

If the same command as above is run, but with a chunk size of 4, we get different results, like this:

![](20151125_Bstrings0970Released\chunk2.png)

Notice now how the initial strings look different, but in the end we still get the same strings out of our file.

The way it works under the covers is to use a sliding scale depending on what the minimum size string is set to. bstrings will move back '20 times the minimum length' bytes, then grabs twice this amount of bytes to look for strings. This way, as your minimums get longer, the amount of bytes that are checked also gets longer.

Let me know if there is anything else you want added and I can get it on the TODO!

As usual, you can get the update [here](http://binaryforay.blogspot.com/p/software.html) or on Github.

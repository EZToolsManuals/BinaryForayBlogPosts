# Introducing RECmd!

Posted: 22nd May 2015

Original link: https://binaryforay.blogspot.com/2015/05/introducing-recmd.html

RECmd is a command line tool to access offline (for now, live Registry support is planned) hives.

The command line options look like this:

![](20150522_IntroducingRECmd\cmdLine.png)

There are 3 categories of commands, General, Query, and Search.

### General

This category includes the Hive and Recover switches. Hive is always required for offline hives. Once online Registry is supported, if the Hive switch is missing, it will be queried/searched.

### Query

This category includes the KeyName, ValueName, SaveToName, MinSize, and Recursive switches.

If either the key or value has spaces in them, be sure to enclose them in quotes.

When passing in key names, the root key name is optional. This is because most of the time you won't even know the root key name in order to be able to pass it in.

To get default values, use a value name of "(default)" as can be seen in the examples below.

{pagebreak}

Usage is very simple. To dump a key, you would do something like this:

![](20150522_IntroducingRECmd\keyQ.png)

In this example, i asked for the ".citrixonline" key and when data was returned we can see the full key path, including the root, after the Key: label.

{pagebreak}

To dump just a value, something like this would be used:

![](20150522_IntroducingRECmd\keyV.png)

Notice how you get more detail when you query a key and a value. This allows you to choose how much detail you want based on your needs.

{pagebreak}

If you need to save the contents of a value's data to a file, use the SaveToName switch.

![](20150522_IntroducingRECmd\SaveTo.png)

If you open c:\temp\MruListEx.bin, it looks like this:

![](20150522_IntroducingRECmd\Hex.png)

Which is the same info we can see in a tool like Registry Explorer for the same value:

![](20150522_IntroducingRECmd\REHex.png)

{pagebreak}

If the Recursive switch is used, full details about the initial key, its values, and all subkeys and their values are dumped. The data when using the Recursive switch is MUCH more comprehensive than when the Recursive switch isn't used. This again puts you in control when it comes to how much detail you want/need to see.

This is a partial output from what that might look like:

![](20150522_IntroducingRECmd\Rec.png)

{pagebreak}

Finally, the MinSize switch can be used to find all values that are at least a given size. In the example below, all values whose value data is larger than 4,096 bytes are located:

![](20150522_IntroducingRECmd\mins.png)

This could be used to look for large blobs of data in the Registry that may correspond to executables, persistence mechanisms, etc.

Once a key is found you can use the previously discussed switches to query that key/value and export as needed for further analysis.

### Search

This is a particularly useful feature to locate data across hives in key names, value names, and perhaps most importantly, in value data.

Searching is broken down into two types, simple and regular expression (RegEx) based.

#### Simple searching

Simple searching looks for the provided string in key names, value names, and value data. It is not anchored in any way. If a search target contains the search string, it is returned as a hit.

{pagebreak}

In the example below, all keys with "MuiCache" somewhere in the key name are returned via the sk switch:

![](20150522_IntroducingRECmd\sskey.png)

To find all values with "edit" somewhere in the value name, we use the sv switch:

![](20150522_IntroducingRECmd\ssv.png)

Notice how the key name and value name are separated by two colons (::).

{pagebreak}

To search for a string inside a value's data, we use the sd switch. To find value data containing "edit", we can use this:

![](20150522_IntroducingRECmd\ssd.png)

{pagebreak}

You can also search for binary patterns too. For a simple search, just string the hex characters together with a dash (04-00-EF-BE for example). Here is the partial output when doing something like this:

![](20150522_IntroducingRECmd\ssd2.png)

This allows you to find signatures for common data structures ANYWHERE in the Registry. The binary signature used above is that of a BEEF0004 extension block, commonly used in ShellBags. It contains information such as MAC dates/times, MFT info, etc.

To actually see the data itself, use one of the query methods.

#### RegEx searching

RegEx searching is much more powerful than simple searches, but the trade off is that it can be slower depending on how complicated your RegEx is.

To use RegEx to search for key names, use the nk switch. Enclose the RegEx in quotes to make sure the shell doesn't try to interpret anything in there.

![](20150522_IntroducingRECmd\nk.png)

Values work the same way via the nv switch (this is partial output, but finding 320 entries took 0.393 seconds on my system):

![](20150522_IntroducingRECmd\nv.png)

{pagebreak}

and finally and perhaps most powerfully, we can search value data using RegEx via the nd switch:

![](20150522_IntroducingRECmd\nd.png)

All regular expressions must of course be valid .net regular expressions. Different flavors of RegEx providers allow for different syntax, so be sure to use the proper syntax.

Here are some RegEx tutorials for .net.

https://msdn.microsoft.com/en-us/library/az24scfc%28v=vs.110%29.aspx
http://regexhero.net/reference/
https://msdn.microsoft.com/en-us/library/hs600312%28v=vs.110%29.aspx
http://www.codeproject.com/Articles/9099/The-Minute-Regex-Tutorial

RegExBuddy is an awesome tool for building and testing RegEx against data sets. 

{pagebreak}

#### Why do we need another Registry tool?

The capabilities of RECmd can be leveraged to find new places where understood data is located in a systematic way. 

Earlier we talked about extension blocks. Extension blocks have a signature that looks like this: XX-00-EF-BE. Using RECmd (and Registry Explorer once searching is included in the next release) we can now find ALL extension blocks wherever they live via a search like this:

RECmd.exe --Hive "C:\Temp\UsrClass 1.dat" --nd "(04|03)-00-EF-BE"

This particular search looks for BEEF0003 and BEEF0004 blocks, but that can easily be extended to any pattern one wishes to search for.

No longer will it be required to export to hives to some kind of text format and use another tool to search through the Registry for patterns.

The full source code for RECmd is available [here](https://github.com/EricZimmerman/RECmd) on Github. RECmd uses my Registry code on the backend and that is available [here](https://github.com/EricZimmerman/Registry).

Right now you can get RECmd from here or via the Software page above. ReCmd will be bundled with Registry Explorer starting with the next release of RE.

This post merely serves as an introduction to what I hope the community will come up with as it relates to use cases for RECmd. Please let me know if there is anything else you want RECmd to do as well as any problems you have solved or other cool uses of RECmd you come up with.

Enjoy!!

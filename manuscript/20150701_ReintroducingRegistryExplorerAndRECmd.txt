# Reintroducing Registry Explorer and RECmd!

Posted: 1st July 2015

Original link: https://binaryforay.blogspot.com/2015/07/reintroducing-registry-explorer-and.html

I am happy to announce the availability of the next releases of Registry Explorer and RECmd! Extensive work has been done in a variety of areas which will be detailed below.

This post serves to hit the highlights of this release. The included manual should be consulted for a full description of new features and changes.

Finally, from this release forward, Registry Explorer and RECmd will be distributed together since they serve similar purposes.

The following describes version 0.7.0.0 of both RECmd and Registry Explorer.

**NOTE:** David Cowen, [@HECFBlog](https://twitter.com/HECFBlog), is having me on the Forensic Lunch this Friday, July 3, to discuss deleted record recovery in the Registry and the latest changes in Registry Explorer and RECmd. Check it out [here](https://plus.google.com/events/cgb3djvqe07q63od9ev7g7pvl84).

Before diving into the changes, here are some examples as to what to expect in this version of Registry Explorer.

#### Example 1: 18 hives loaded, search term 'mui'

* Searching in key name resulted in 62 hits in 0.14533 seconds
* Searching in value name resulted in 75 hits in 0.19966 seconds
* Searching in value data resulted in 57 hits in 4.22546 seconds
* Searching in value slack resulted in 10 hits in 1.08956 seconds
* Searching in key name, value name, value data, and value slack at the same time resulted in 204 hits in 5.42693 seconds

#### Example 2: 84 hives loaded, search term 'comp'

* Searching in key name resulted in 870 hits in 0.36592 seconds
* Searching in value name resulted in 2,745 hits in 0.59400 seconds
* Searching in value data resulted in 6,862 hits in 8.58572 seconds
* Searching in value slack resulted in 97 hits in 3.42388 seconds
* Searching in key name, value name, value data, and value slack at the same time resulted in 10,574 hits in 14.06698 seconds

![](20150701_ReintroducingRegistryExplorerAndRECmd\547327.jpg)

### Registry backend

More than 25 commits have been made to the [code base](https://github.com/EricZimmerman/Registry) since May, 2015. Some of the changes include:

* Regular expression search support
* Find by value size
* Find in key and value name
* Find by last write timestamp
* Ability to search value data and value slack for strings regardless of capitalization or encoding
* Bug fixes
* Code clean up

#### Registry Search improvements

The majority of the improvements centered around search improvements in the core parser. After exploring several avenues, I came up with a way to allow for searching for strings regardless of how they are stored and in a case insensitive manner. This includes the ability to report back to the user the exact capitalization/byte string that was hit on.

Since the Registry parser powers both RECmd and Registry Explorer, both programs reap the benefits of these improvements. We will see examples of these improvements in the sections below.

## RECmd

The last release of RECmd was mostly about cleanup and tweaking. This version includes the following changes:

* NEW: Added –Literal switch. When present, --sd and --ss switches will not be interpreted
* NEW: Added --ss switch for searching Value slack space
* NEW: Search terms are now highlighted in search results. Edit nlog.config to adjust colors for foreground and background
* NEW: Added --RegEx switch. When present, treat <string> in --sk, --sv, --sd, and --ss as a regular expression
* NEW: If nlog.config is missing, add default config and warn user
* CHANGE: Switches are NOT case sensitive any more
* CHANGE: Remove RegEx specific switches (See --RegEx above)
* CHANGE: Tweak command line option descriptions
* CHANGE: Updated nlog

{pagebreak}

Lets unpack some of these changes. The first thing to notice is that the command line switches have been simplified. Capitalization of switches is also not required any more (so --hive or --Hive works fine).

![](20150701_ReintroducingRegistryExplorerAndRECmd\1.png)

This includes removing the dedicated RegEx switches (starting with n) in favor of a single --RegEx switch that is used in conjunction with the standard search switches. 

A new search, -ss, has been added. This option looks in value slack space.

The other new switch is the --Literal switch that prevents RECmd from converting the entered string into its ASCII and Unicode byte string formats for search purposes. The literal switch is honored only when using -sd and -ss searches. 

Finally, the best (IMO) and most important change is RECmd's ability to highlight the search hit in the returned information. 

{pagebreak}
The colors used to highlight hits are completely user configurable. The default can be seen below, but you can adjust the colors via the nlog.config file as shown below.

![](20150701_ReintroducingRegistryExplorerAndRECmd\CIS5ooIUEAEaOxh.png)

A few examples are in order.

##### Key name and value name searches

Here a search against key names is performed for key names containing MuI, Notice however, that the keys returned contain a variety of capitalization that is different for the string we searched for.

![](20150701_ReintroducingRegistryExplorerAndRECmd\sk.png)

RECmd is even smart enough to highlight Regular Expression based matches, like this:

![](20150701_ReintroducingRegistryExplorerAndRECmd\sk2.png)

{pagebreak}

This functionality really shines when searching in value data and value slack. 

One other thing to notice is that you are told the hits were found via RegEx at the bottom when the --RegEx switch is used.

Value name searching works the same way.

![](20150701_ReintroducingRegistryExplorerAndRECmd\sv3.png)

{pagebreak}

##### Value data searches

Value searches are where the new back end search capabilities start to shine. In the example below, we are searching for the string **UsErs**. Two hits were found, but neither is a plain text search hit.

![](20150701_ReintroducingRegistryExplorerAndRECmd\sv1.png)

The highlighted sections above break down as follows:

55-73-65-72-73 == Users (ASCII)
55-00-73-00-65-00-72-00-73-00 == Users (Unicode)

So what happened here? RECmd was able to take the search term, UsErs, and search for it in a way that ANY combination of capitalization will be found AND the exact bytes (and therefore capitalization of the hit) that make up the hit are highlighted regardless of the encoding of the string (Western 1252 and Unicode to be exact).

This feature provides enormous power to find data in Registry hives as search terms will be found both in binary and string based searches. In RECmd 0.6.1.0, the end user would have been required to search for each byte string in every possible capitalization format in order to find the hit. Needless to say, this would be near impossible and very tedious to attempt.

{pagebreak}

##### Value slack searches

Slack searches work the same way as value data searches. As an example, a search for sk was done in value slack. Since all value slack is treated as binary data, the importance of the search improvements can be seen here as well.

![](20150701_ReintroducingRegistryExplorerAndRECmd\ss1.png)

{pagebreak}

##### Other examples

Value data search for cdrom. We get back a variety of hits, some as strings of differing capitalization and some as encoded Unicode strings.

![](20150701_ReintroducingRegistryExplorerAndRECmd\sd3.png)

{pagebreak}

## Registry Explorer

The vast majority of changes in this release were focused on Registry Explorer. In fact, this is pretty much a complete rewrite of every line of code in Registry Explorer. This was necessary to some initial bad design decisions which just did not scale.

The changes in this version include:

Hive processing is fully asynchronous, but very large hives can take a few seconds to display once the hive is loaded. This is due to the need to load all 

NEW: Full support for searching including key names, value names, and value data, both with simple searches and RegEx. Searching based on last write timestamps is supported as well
NEW: Fully asynchronous loading of hives which keeps the GUI responsive, even when loading 100+ MB hives (I am looking at you SOFTWARE hive)
NEW: Tech details hex editors now update with offset and selection length when bytes are selected
NEW: Added value context menu to copy value summary (a combination of name, type, and data), name, type, data, and slack to clipboard
NEW: Add value context menu to export data and slack to a file
NEW: Settings for things persist
NEW: Search strings are remembered and autopopulate when typing on the Find form. Use the Tools menu to clear
NEW: Added Convert | To hex ASCII and To hex Unicode to Find. This allows you to look for encoded strings in value data without having to manually convert strings to hex
NEW: Allow deleting of user created bookmarks in Bookmark Manager via Ctrl-Delete
NEW: Added context menu to Available bookmarks (Copy, expand/collapse, tech details) that work the same as the 'Registry hives' context menu options
NEW: Added 'Jump to key' context menu item on Available bookmarks tab that will select the hive's key on the 'Registry hives' tab
NEW: More hot keys added to main/context menus
NEW: Added 'Root key name' to Tech details | Hive details properties and strip root key from Tech details window title to save space
NEW: Added Export 'Registry hive' menu to File menu. This exports the tree exactly as it is shown to the selected format
NEW: Enable/disable expand/collapse subkey options depending on the expanded state of the selected key
NEW: Save positions of vertical and horizontal splitters
NEW: Trees and grids all save settings (sorting, filtering, conditional formatting rules) between sessions
NEW: Save size of main form
NEW: Improved hex editor control for RegBinary keys. Added offset, selection length, and data interpreter
NEW: Added 'Show associated deleted records' and 'Show unassociated deleted records' to Options menu
NEW: Added 'Slack viewer' tab for values that have slack space
NEW: Added 'Show parent keys when filtering' to options menu. Turning this OFF shows only the keys that match the filter. When ON, parent keys to keys matching the filter are also shown
NEW: Added a Total messages counter to lower status bar (far right) that indicates the total number of messages available on the Messages form
NEW: Added skinning support. Active skin can be changed from the Options menu
NEW: Added icon for Registry hive in the Registry hives tree to visually separate it from keys
NEW: Make hive name bold to make it stand out from keys
NEW: Tech details info can be copied via Ctrl+C (just the value) or Ctrl+Alt+C (Name: Value)
NEW: All hex viewers now support Ctrl+C to copy selected bytes to clipboard
NEW: Search for minimum value sizes added
NEW: Search in value slack added

CHANGE: Allow resizing of window below 800x600
CHANGE: Drag and dropping of hives supported on any of the 3 main sections of Registry Explorer
CHANGE: Status bars adjusted. Added options to hold Shift when double clicking in order to copy different parts of the key/value
CHANGE: Add vertical scroll bar to Technical details hex editors
CHANGE: Rename tree context menus from 'child nodes' to 'subkeys'
CHANGE: Hide Messages form by default since things load and process faster when its hidden
CHANGE: Icon for existing key placeholder in Associated deleted records updated
CHANGE: Icon for Associated deleted records updated
CHANGE: Made legend icons bigger
CHANGE: Bookmarks manager now allows editing/deleted both common and user created bookmarks

FIX: Bug fixes in Registry parser (yay unit tests)
FIX: Show SK record in Technical details form

Whew! That's a long list! Lets look at some details to see them in action.

##### General improvements

Fully asynchronous loading of hives. This means hives get loaded in their own thread in parallel. As hives are finished, they are displayed. This lets smaller, less complicated hives load quicker while bigger hives finish processing. You can start interacting with hives as soon as they show up.

Settings for window size, position, and options persist between sessions and are stored in the Settings folder. Pretty much everything is remembered between program executions.

{pagebreak}

##### Interface improvements

The first thing you will notice when loading hives is that the Registry hives is that some icons have changed. The hive itself has a green icon and the hive name is in bold. The number at the end of the Registry hives tab is the total number of hives currently loaded.

![](20150701_ReintroducingRegistryExplorerAndRECmd\newinter.png)

The status bars across the bottom were tweaked as well. Hovering over the key path, value name, or last write time will show you a tool tip with different options to copy data to the clipboard.

![](20150701_ReintroducingRegistryExplorerAndRECmd\tooltip.png)

{pagebreak}

The checkbox to the far left toggles showing the root key name in the key path. It is not shown by default.

When looking at RegBinary and value slack, a new hex viewer has been created. The current offset and selected bytes count is shown. After selecting a range of bytes, Ctrl+C copies those bytes to the clipboard.

![](20150701_ReintroducingRegistryExplorerAndRECmd\hexv.png)

{pagebreak}

In the lower right corner is a button to show a data interpreter. The data interpreter decodes the binary data from the current offset into a variety of formats. Sweeping a range of bytes does not affect the data interpreter, only the current offset. The data interpreter can be seen below.

![](20150701_ReintroducingRegistryExplorerAndRECmd\di.png)

In the lower right of the data interpreter is a ? that contains a tool tip for how to copy values (and optionally the value name) to the clipboard.

The data interpreter will update in real time as the offset is changed in the hex viewer.

{pagebreak}

Values now have a context menu, as seen below.

![](20150701_ReintroducingRegistryExplorerAndRECmd\valcontext.png)

The options are straightforward with the exception of Value summary. This option copies basic info about the value in text format to the clipboard, like this:

Value: MRUListEx (RegBinary)
Data: 00-00-00-00-FF-FF-FF-FF
Slack: 6F-00-20-00

The Export options allow for saving either value data or slack to a file (as binary data).

{pagebreak}

The Technical details form has been tweaked slightly. In the lower right is a ? that shows a tool tip for how to copy the properties (and optionally the property name) via Ctrl+C.

![](20150701_ReintroducingRegistryExplorerAndRECmd\tech.png)

When a value is selected, the value's data and, if present, slack, is shown at the bottom. This allows you to verify both the VK record and the data (found at offset 0x0C) in the same place.

{pagebreak}

The available bookmarks tab has also been updated with the icons from the Registry hives tab. A new context menu option, 'Jump to key', has been added.

![](20150701_ReintroducingRegistryExplorerAndRECmd\avail.png)

{pagebreak}

Using this option will select the bookmarked key in the currently active hive and switch to the Registry hives tab. This is useful to see the bookmark in context with other keys in the hive.

![](20150701_ReintroducingRegistryExplorerAndRECmd\options.png)

The options menu has been tweaked and improved, adding support for a different way to filter the Registry hives tree and full skin support.

{pagebreak}

The 'Show parent keys when filtering' option works as follows. The default option is to show all parent keys of keys that match the filter. In this case, the filter value is 0. The parent keys are highlighted in yellow.

![](20150701_ReintroducingRegistryExplorerAndRECmd\filter1.png)

{pagebreak}

Turning this option off and doing the same search results in a much different result. Notice in the screen shot below only the keys that match the filter criteria are shown. This can greatly reduce noise in the results in addition to lessening the need to scroll to the keys that match the filter criteria.

![](20150701_ReintroducingRegistryExplorerAndRECmd\filter2.png)

The other aspect this option controls is whether to show subkeys of keys that match a given filter. With the option on, any subkeys of keys that match the filter will continue to be shown. With the option off, subkeys of keys matching the filter are hidden.

{pagebreak}

Registry Explorer contains the ability to apply Excel like conditional formatting to any of the tree or grid controls. To set up conditional formatting, right click on a column header and choose the context menu option for conditional formatting at the bottom.

![](20150701_ReintroducingRegistryExplorerAndRECmd\condit1.png)

{pagebreak}

If we choose the Text that contains option and configure it like this:

![](20150701_ReintroducingRegistryExplorerAndRECmd\containbag.png)

{pagebreak}

The Registry hives tab changes to match the rule (instances of 'Bag' are circled).

![](20150701_ReintroducingRegistryExplorerAndRECmd\conditDone.png)

This lets you highlight conditions that are meaningful to you and your investigations.

Finally, as mentioned above, Registry Explorer supports skinning so you can get into the holiday spirit when the time comes.

![](20150701_ReintroducingRegistryExplorerAndRECmd\theme.png)

![](20150701_ReintroducingRegistryExplorerAndRECmd\skin.png)

This is just an overview of the changes in this version of Registry Explorer. For full details, see the manual.

{pagebreak}

##### Searching

After loading one or more hives, use the Tools | Find option (or simply press Ctrl+F) to bring up the Find dialog. 

All searching is also fully asynchronous and results are returned as they are available. This results in smaller hive search results showing up more quickly than larger hives. 

![](20150701_ReintroducingRegistryExplorerAndRECmd\Find1.png)

The Options menu lets you clear recent Standard searches as well as convert strings to their ASCII or Unicode byte string equivalent.

The Help menu contains a link to a web page that provides help on constructing .net regular expressions as well as some search tips.

{pagebreak}

##### Key name and value name search

To conduct a key or value name search, enter a string in the 'Search for' box and check the Key name and/or Value name boxes. Adjust the search type to be either a simple string search or a regular expression. To start the search, click the 'Search' button or just press Enter on the keyboard. Registry Explorer will adjust the default button depending on which search you are conducting, so it is often easiest just to enter your search conditions and pres Enter.

![](20150701_ReintroducingRegistryExplorerAndRECmd\FindkeyVal.png)

In the example above, we found 143 search hits across 13 loaded hives in 0.31 seconds. 

The Hive Name indicates which hive the hit was found in and the Hit Location will indicate where the hit was found.

{pagebreak}

Depending on the number of search hits, it is often helpful to use the grouping feature. If we drag the Hive Name and Hit Location columns to the top of the grid, we can now browse the search results by hive and hit type.

![](20150701_ReintroducingRegistryExplorerAndRECmd\FindGrouping.png)

{pagebreak}

To view a hit in context, simply double click it and Registry Explorer will select the right hive, key, and value (assuming it is a Value Name hit). If we double click row with the MuiVerb hit above, we see the following in Registry Explorer.

![](20150701_ReintroducingRegistryExplorerAndRECmd\ValueNameHit.png)

{pagebreak}

Notice how the search term is highlighted in the value name. If we double click on a key name hit, we get the following in Registry Explorer.

![](20150701_ReintroducingRegistryExplorerAndRECmd\KeyHit.png)

{pagebreak}

##### Value data and value slack search

When conducting Value data and/or value slack searches, the 'Search for' string is looked for in such a way as to find hits regardless of case and encoding (i.e. the string is converted to ASCII and stored as byte array, or converted to Unicode and stored as a byte array). 

If you do not want Registry Explorer to search for encoded strings, check the Literal check box. When Literal is checked, the search term will be looked for exactly as it is entered. This would be useful for entering a string of bytes, separated by dashes, that you wish to look for. Without Literal enabled, Registry Explorer would look for the byte string exactly as entered and in RegBinary fields. The Literal option makes searching more efficient when you want to search for an already encoded search term. Literal is only honored for Value data and Value slack searches.

When a search hit is found in a non RegBinary value, all instances of the search term are highlighted as seen below.

![](20150701_ReintroducingRegistryExplorerAndRECmd\ValueDataHit.png)

{pagebreak}

When a hit is found in a RegBinary value, the corresponding hit is highlighted in the hex viewer, as seen below. In this case, notice how the string we searched for was **An**, but we still found the hit for **an**.

![](20150701_ReintroducingRegistryExplorerAndRECmd\FindValueCaseHit.png)

Only the first instance of the search term is highlighted in the hex viewer, but you can use the preview to the right of the hex viewer to see other string values in the binary data.

The other thing to notice is how the search results can be filtered. These filters can be edited by clicking the 'Edit Filter' button to the far right of the filter condition at the bottom of the grid.

{pagebreak}

When looking at a value slack hit, the Slack viewer tab will be active and the hit will again be highlighted.

![](20150701_ReintroducingRegistryExplorerAndRECmd\findslack.png)

{pagebreak}

##### Last write timestamp search

Registry Explorer allows for searching for keys with last write times before, between, or after certain time stamps. 

![](20150701_ReintroducingRegistryExplorerAndRECmd\tsFind.png)

Once the search is complete, double clicking on a row will again select the key in Registry Explorer.

![](20150701_ReintroducingRegistryExplorerAndRECmd\tsSelect.png)

{pagebreak}

##### Minimum value size search

Registry Explorer can find all values with data size greater than or equal to a given size in bytes. In the example below, 228 hits across all open hives were found in 0.4 seconds.

![](20150701_ReintroducingRegistryExplorerAndRECmd\minval2.png)

Clicking on the Value Data Length column sorts the column and makes it easy to find the largest values in the loaded hives.

As as have already seen, double clicking will select the key and value in the main Registry Explorer window.

{pagebreak}

##### Miscellaneous

The Bookmarks manager has been updated to allow for editing both common and user created bookmarks. You can also delete bookmarks from this interface as well.

![](20150701_ReintroducingRegistryExplorerAndRECmd\bmm.png)

Finally, a manual is now included that fully explains all of these things and more in detail. Be sure to read it so you can get the most out of Registry Explorer and RECmd.

{pagebreak}

#### Whats next?

With searching and the performance overhaul out of the way with this release, the next release will focus on adding plugins. 

The general concept for plugins is to allow plugin authors to register interest in a Registry path and or value. When a user clicks on a key or value that matches what a plugin is interested in, the plugin will process the data which will then be made available to the end user. 

For plugins that process entire keys, a new tab will be added next to the Values tab in the upper right. For plugins that process a single key, a new tab will be added to the bottom with the other viewer tabs (type viewer, slack viewer, etc). 

This has the advantage of having multiple plugins written for keys/values without having to choose which one to use.

For example, if a plugin was interested in shellbags, whenever a user navigated to BagMRU or a subkey, a new tab would show up next to the Values tab. This tab would then contain all of the decoded shellbag entries for the selected key. Since the plugin would get its own tab, both the original data AND the decoded data is available and visible at all times.

I am also interested in your thoughts, ideas, and feature requests. Please let me know how Registry Explorer and RECmd can be improved to make your work easier.

I hope you enjoy this release!

You can get the update from the [Software](http://binaryforay.blogspot.com/p/software.html) page.
